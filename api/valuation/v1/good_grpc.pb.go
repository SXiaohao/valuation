// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: valuation/v1/good.proto

package valuation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodClient is the client API for Good service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodClient interface {
	CreateGood(ctx context.Context, in *CreateGoodsRequest, opts ...grpc.CallOption) (*CreateGoodsReply, error)
	UpdateGood(ctx context.Context, in *UpdateGoodsRequest, opts ...grpc.CallOption) (*UpdateGoodsReply, error)
	DeleteGood(ctx context.Context, in *DeleteGoodsRequest, opts ...grpc.CallOption) (*DeleteGoodsReply, error)
	GetGood(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GetGoodsReply, error)
	ListGoods(ctx context.Context, in *ListGoodsRequest, opts ...grpc.CallOption) (*ListGoodsReply, error)
	ListGoodsByWords(ctx context.Context, in *ListGoodsByWordsRequest, opts ...grpc.CallOption) (*ListGoodsReply, error)
}

type goodClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodClient(cc grpc.ClientConnInterface) GoodClient {
	return &goodClient{cc}
}

func (c *goodClient) CreateGood(ctx context.Context, in *CreateGoodsRequest, opts ...grpc.CallOption) (*CreateGoodsReply, error) {
	out := new(CreateGoodsReply)
	err := c.cc.Invoke(ctx, "/api.valuation.Good/CreateGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) UpdateGood(ctx context.Context, in *UpdateGoodsRequest, opts ...grpc.CallOption) (*UpdateGoodsReply, error) {
	out := new(UpdateGoodsReply)
	err := c.cc.Invoke(ctx, "/api.valuation.Good/UpdateGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) DeleteGood(ctx context.Context, in *DeleteGoodsRequest, opts ...grpc.CallOption) (*DeleteGoodsReply, error) {
	out := new(DeleteGoodsReply)
	err := c.cc.Invoke(ctx, "/api.valuation.Good/DeleteGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) GetGood(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GetGoodsReply, error) {
	out := new(GetGoodsReply)
	err := c.cc.Invoke(ctx, "/api.valuation.Good/GetGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) ListGoods(ctx context.Context, in *ListGoodsRequest, opts ...grpc.CallOption) (*ListGoodsReply, error) {
	out := new(ListGoodsReply)
	err := c.cc.Invoke(ctx, "/api.valuation.Good/ListGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) ListGoodsByWords(ctx context.Context, in *ListGoodsByWordsRequest, opts ...grpc.CallOption) (*ListGoodsReply, error) {
	out := new(ListGoodsReply)
	err := c.cc.Invoke(ctx, "/api.valuation.Good/ListGoodsByWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodServer is the server API for Good service.
// All implementations must embed UnimplementedGoodServer
// for forward compatibility
type GoodServer interface {
	CreateGood(context.Context, *CreateGoodsRequest) (*CreateGoodsReply, error)
	UpdateGood(context.Context, *UpdateGoodsRequest) (*UpdateGoodsReply, error)
	DeleteGood(context.Context, *DeleteGoodsRequest) (*DeleteGoodsReply, error)
	GetGood(context.Context, *GetGoodsRequest) (*GetGoodsReply, error)
	ListGoods(context.Context, *ListGoodsRequest) (*ListGoodsReply, error)
	ListGoodsByWords(context.Context, *ListGoodsByWordsRequest) (*ListGoodsReply, error)
	mustEmbedUnimplementedGoodServer()
}

// UnimplementedGoodServer must be embedded to have forward compatible implementations.
type UnimplementedGoodServer struct {
}

func (UnimplementedGoodServer) CreateGood(context.Context, *CreateGoodsRequest) (*CreateGoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGood not implemented")
}
func (UnimplementedGoodServer) UpdateGood(context.Context, *UpdateGoodsRequest) (*UpdateGoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGood not implemented")
}
func (UnimplementedGoodServer) DeleteGood(context.Context, *DeleteGoodsRequest) (*DeleteGoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGood not implemented")
}
func (UnimplementedGoodServer) GetGood(context.Context, *GetGoodsRequest) (*GetGoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGood not implemented")
}
func (UnimplementedGoodServer) ListGoods(context.Context, *ListGoodsRequest) (*ListGoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGoods not implemented")
}
func (UnimplementedGoodServer) ListGoodsByWords(context.Context, *ListGoodsByWordsRequest) (*ListGoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGoodsByWords not implemented")
}
func (UnimplementedGoodServer) mustEmbedUnimplementedGoodServer() {}

// UnsafeGoodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodServer will
// result in compilation errors.
type UnsafeGoodServer interface {
	mustEmbedUnimplementedGoodServer()
}

func RegisterGoodServer(s grpc.ServiceRegistrar, srv GoodServer) {
	s.RegisterService(&Good_ServiceDesc, srv)
}

func _Good_CreateGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).CreateGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.valuation.Good/CreateGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).CreateGood(ctx, req.(*CreateGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_UpdateGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).UpdateGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.valuation.Good/UpdateGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).UpdateGood(ctx, req.(*UpdateGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_DeleteGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).DeleteGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.valuation.Good/DeleteGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).DeleteGood(ctx, req.(*DeleteGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_GetGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).GetGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.valuation.Good/GetGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).GetGood(ctx, req.(*GetGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_ListGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).ListGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.valuation.Good/ListGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).ListGoods(ctx, req.(*ListGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_ListGoodsByWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoodsByWordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).ListGoodsByWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.valuation.Good/ListGoodsByWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).ListGoodsByWords(ctx, req.(*ListGoodsByWordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Good_ServiceDesc is the grpc.ServiceDesc for Good service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Good_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.valuation.Good",
	HandlerType: (*GoodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGood",
			Handler:    _Good_CreateGood_Handler,
		},
		{
			MethodName: "UpdateGood",
			Handler:    _Good_UpdateGood_Handler,
		},
		{
			MethodName: "DeleteGood",
			Handler:    _Good_DeleteGood_Handler,
		},
		{
			MethodName: "GetGood",
			Handler:    _Good_GetGood_Handler,
		},
		{
			MethodName: "ListGoods",
			Handler:    _Good_ListGoods_Handler,
		},
		{
			MethodName: "ListGoodsByWords",
			Handler:    _Good_ListGoodsByWords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "valuation/v1/good.proto",
}
